goals:

finish control flows and tests in java:done

-------------------------------------------------------------------
-ADDING JUNIT in IntelliJ
-Writing Some Unit Tests
-Edge Cases
------------------------------------------------------------------
package com.ugrckl.guessinggame;

import java.util.Random;

public class GuessingGame {
    private final int randomNumber = new Random().nextInt(10) + 1;
    private int counter = 0;

    public String guess(int guessedNumber) {
        counter++;
        String tryText = counter == 1 ? "try" : "tries";
        String winningMsg = String.format("You got it in %d %s",counter,tryText);
        String response = null;
        if(counter ==4 && guessedNumber != getRandomNumber())
        {
            response = String.format("You didn't get it and you've had %d %s. Game over.",counter,tryText);
        } else if (counter > 4){
            response = "Sorry, you are limited to only 4 tries. Your game is over.";
        } else {
            String tooLowText = null;
            if(guessedNumber < getRandomNumber()){
                tooLowText = "- you're too low";
            } else if(guessedNumber > getRandomNumber()){
                tooLowText = "- you're too high";
            }else {tooLowText = "";}
            String loseText = String.format("You didn't get it %s",tooLowText).trim();
            response = guessedNumber == getRandomNumber() ? winningMsg : loseText;
        }
        return response;
    }

    public int getRandomNumber() {
        return randomNumber;
    }

    public static void main(String[] args) {
        GuessingGame game = new GuessingGame();
        boolean loopShouldContinue = true;
        do{
        String input = System.console().readLine("Enter a number: ");
        if ("q".equals(input)){
            return;
        }
        String output = game.guess(Integer.parseInt(input));
        System.out.println(output);
        if (output.contains("You got it") || output.contains("over")){
            loopShouldContinue = false;
        }
        } while(loopShouldContinue);

    }
}
----------------------------------------------------------------------------

package com.ugrckl.guessinggame;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.RepeatedTest;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class GuessingGameTest {


    private GuessingGame game;

    @BeforeEach
    void setUp() {
        game = new GuessingGame();
    }

    @Test
    public void testSimpleWinSituation(){
        int randomNum = game.getRandomNumber();
        String message = game.guess(randomNum);
        assertEquals("You got it in 1 try",message);
    }

    @Test
    public void testOneWrongNegGuessSituation(){
        //int randomNum = game.getRandomNumber();
        String message = game.guess(-5);
        assertEquals("You didn't get it - you're too low",message);
    }

    @Test
    public void testOneWrongPosGuessSituation(){
        int randomNum = game.getRandomNumber();
        String message = game.guess(randomNum + 1);
        assertEquals("You didn't get it - you're too high",message);
    }

    @Test
    public void testRandomNumberGeneration(){
        // 1 2 3 4 5 6 7 8 9 10
        // 1 1 1 1 0 1 0 1 1 1  = 10
        int[] rndNumCount = new int[11];
        for (int counter = 0; counter < 100; counter++){
            GuessingGame game = new GuessingGame();
            int randomNum = game.getRandomNumber();
            rndNumCount[randomNum] = 1;
        }
        int sum = 0;
        for(int counter = 0;counter < 11; counter++){
            sum += rndNumCount[counter];
        }
        assertEquals(10,sum);
    }

    @Test
    public void testFourWrongGuesses(){
        makeThreeWrongGuesses();
        String message = game.guess(-3);
        assertEquals("You didn't get it and you've had 4 tries. Game over.",message);
    }

    @Test
    public void testTenWrongGuesses(){
        makeThreeWrongGuesses();
        makeThreeWrongGuesses();
        makeThreeWrongGuesses();
        String message = game.guess(-3);
        assertEquals("Sorry, you are limited to only 4 tries. Your game is over.",message);
    }

    private void makeThreeWrongGuesses() {
        game.guess(-3);
        game.guess(-3);
        game.guess(-3);


    }

    @Test
    public void testThreeWrongGuessesAndOneCorrect(){
        makeThreeWrongGuesses();
        int correctAnswer = game.getRandomNumber();
        String message = game.guess(correctAnswer);
        assertEquals("You got it in 4 tries",message);
    }

    @Test
    public void testTwoWrongGuessesAndOneCorrect(){
        game.guess(-3);
        game.guess(-3);
        int correctAnswer = game.getRandomNumber();
        String message = game.guess(correctAnswer);
        Assertions.assertTrue(message.contains(" 3 "),"Should indicate 3 tries");
        assertTrue(message.contains("You got it"),"Should indicate that we got the right number");
    }

}
